// Generated from graphql_swift_gen gem
import Foundation

extension ExampleSchema {
	open class SecurityVulnerabilityQuery: GraphQL.AbstractQuery, GraphQLQuery {
		public typealias Response = SecurityVulnerability

		@discardableResult
		open func advisory(aliasSuffix: String? = nil, _ subfields: (SecurityAdvisoryQuery) -> Void) -> SecurityVulnerabilityQuery {
			let subquery = SecurityAdvisoryQuery()
			subfields(subquery)

			addField(field: "advisory", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@discardableResult
		open func firstPatchedVersion(aliasSuffix: String? = nil, _ subfields: (SecurityAdvisoryPackageVersionQuery) -> Void) -> SecurityVulnerabilityQuery {
			let subquery = SecurityAdvisoryPackageVersionQuery()
			subfields(subquery)

			addField(field: "firstPatchedVersion", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@discardableResult
		open func package(aliasSuffix: String? = nil, _ subfields: (SecurityAdvisoryPackageQuery) -> Void) -> SecurityVulnerabilityQuery {
			let subquery = SecurityAdvisoryPackageQuery()
			subfields(subquery)

			addField(field: "package", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@discardableResult
		open func severity(aliasSuffix: String? = nil) -> SecurityVulnerabilityQuery {
			addField(field: "severity", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func updatedAt(aliasSuffix: String? = nil) -> SecurityVulnerabilityQuery {
			addField(field: "updatedAt", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func vulnerableVersionRange(aliasSuffix: String? = nil) -> SecurityVulnerabilityQuery {
			addField(field: "vulnerableVersionRange", aliasSuffix: aliasSuffix)
			return self
		}
	}

	open class SecurityVulnerability: GraphQL.AbstractResponse, GraphQLObject {
		public typealias Query = SecurityVulnerabilityQuery

		open override func deserializeValue(fieldName: String, value: Any) throws -> Any? {
			let fieldValue = value
			switch fieldName {
				case "advisory":
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
				}
				return try SecurityAdvisory(fields: value)

				case "firstPatchedVersion":
				if value is NSNull { return nil }
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
				}
				return try SecurityAdvisoryPackageVersion(fields: value)

				case "package":
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
				}
				return try SecurityAdvisoryPackage(fields: value)

				case "severity":
				guard let value = value as? String else {
					throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
				}
				return SecurityAdvisorySeverity(rawValue: value) ?? .unknownValue

				case "updatedAt":
				guard let value = value as? String else {
					throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
				}
				return value

				case "vulnerableVersionRange":
				guard let value = value as? String else {
					throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
				}
				return value

				default:
				throw SchemaViolationError(type: SecurityVulnerability.self, field: fieldName, value: fieldValue)
			}
		}

		open var typeName: String { return "SecurityVulnerability" }

		open var advisory: ExampleSchema.SecurityAdvisory {
			return internalGetAdvisory()
		}

		func internalGetAdvisory(aliasSuffix: String? = nil) -> ExampleSchema.SecurityAdvisory {
			return field(field: "advisory", aliasSuffix: aliasSuffix) as! ExampleSchema.SecurityAdvisory
		}

		open var firstPatchedVersion: ExampleSchema.SecurityAdvisoryPackageVersion? {
			return internalGetFirstPatchedVersion()
		}

		func internalGetFirstPatchedVersion(aliasSuffix: String? = nil) -> ExampleSchema.SecurityAdvisoryPackageVersion? {
			return field(field: "firstPatchedVersion", aliasSuffix: aliasSuffix) as! ExampleSchema.SecurityAdvisoryPackageVersion?
		}

		open var package: ExampleSchema.SecurityAdvisoryPackage {
			return internalGetPackage()
		}

		func internalGetPackage(aliasSuffix: String? = nil) -> ExampleSchema.SecurityAdvisoryPackage {
			return field(field: "package", aliasSuffix: aliasSuffix) as! ExampleSchema.SecurityAdvisoryPackage
		}

		open var severity: ExampleSchema.SecurityAdvisorySeverity {
			return internalGetSeverity()
		}

		func internalGetSeverity(aliasSuffix: String? = nil) -> ExampleSchema.SecurityAdvisorySeverity {
			return field(field: "severity", aliasSuffix: aliasSuffix) as! ExampleSchema.SecurityAdvisorySeverity
		}

		open var updatedAt: String {
			return internalGetUpdatedAt()
		}

		func internalGetUpdatedAt(aliasSuffix: String? = nil) -> String {
			return field(field: "updatedAt", aliasSuffix: aliasSuffix) as! String
		}

		open var vulnerableVersionRange: String {
			return internalGetVulnerableVersionRange()
		}

		func internalGetVulnerableVersionRange(aliasSuffix: String? = nil) -> String {
			return field(field: "vulnerableVersionRange", aliasSuffix: aliasSuffix) as! String
		}

		override open func childObjectType(key: String) -> GraphQL.ChildObjectType {
			switch(key) {
				case "advisory":

				return .object

				case "firstPatchedVersion":

				return .object

				case "package":

				return .object

				case "severity":

				return .scalar

				case "updatedAt":

				return .scalar

				case "vulnerableVersionRange":

				return .scalar

				default:
				return .scalar
			}
		}

		override open func fetchChildObject(key: String) -> GraphQL.AbstractResponse? {
			switch(key) {
				case "advisory":
				return internalGetAdvisory()

				case "firstPatchedVersion":
				return internalGetFirstPatchedVersion()

				case "package":
				return internalGetPackage()

				default:
				break
			}
			return nil
		}

		override open func fetchChildObjectList(key: String) -> [GraphQL.AbstractResponse] {
			switch(key) {
				default:
				return []
			}
		}

		open func childResponseObjectMap() -> [GraphQL.AbstractResponse]  {
			var response: [GraphQL.AbstractResponse] = []
			objectMap.keys.forEach({
				key in
				switch(key) {
					case "advisory":
					response.append(internalGetAdvisory())
					response.append(contentsOf: internalGetAdvisory().childResponseObjectMap())

					case "firstPatchedVersion":
					if let value = internalGetFirstPatchedVersion() {
						response.append(value)
						response.append(contentsOf: value.childResponseObjectMap())
					}

					case "package":
					response.append(internalGetPackage())
					response.append(contentsOf: internalGetPackage().childResponseObjectMap())

					default:
					break
				}
			})
			return response
		}

		open func responseObject() -> GraphQL.AbstractResponse {
			return self as GraphQL.AbstractResponse
		}
	}
}
