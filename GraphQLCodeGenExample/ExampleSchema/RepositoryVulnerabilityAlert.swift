// Generated from graphql_swift_gen gem
import Foundation

extension ExampleSchema {
	open class RepositoryVulnerabilityAlertQuery: GraphQL.AbstractQuery, GraphQLQuery {
		public typealias Response = RepositoryVulnerabilityAlert

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.vulnerableVersionRange` instead. Removal on 2019-10-01 UTC.")
		@discardableResult
		open func affectedRange(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "affectedRange", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func createdAt(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "createdAt", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func dismissReason(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "dismissReason", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func dismissedAt(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "dismissedAt", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func dismisser(aliasSuffix: String? = nil, _ subfields: (UserQuery) -> Void) -> RepositoryVulnerabilityAlertQuery {
			let subquery = UserQuery()
			subfields(subquery)

			addField(field: "dismisser", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityAdvisory.identifiers` instead. Removal on 2019-10-01 UTC.")
		@discardableResult
		open func externalIdentifier(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "externalIdentifier", aliasSuffix: aliasSuffix)
			return self
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityAdvisory.references` instead. Removal on 2019-10-01 UTC.")
		@discardableResult
		open func externalReference(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "externalReference", aliasSuffix: aliasSuffix)
			return self
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.firstPatchedVersion` instead. Removal on 2019-10-01 UTC.")
		@discardableResult
		open func fixedIn(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "fixedIn", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func id(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "id", aliasSuffix: aliasSuffix)
			return self
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.package` instead. Removal on 2019-10-01 UTC.")
		@discardableResult
		open func packageName(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "packageName", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func repository(aliasSuffix: String? = nil, _ subfields: (RepositoryQuery) -> Void) -> RepositoryVulnerabilityAlertQuery {
			let subquery = RepositoryQuery()
			subfields(subquery)

			addField(field: "repository", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@discardableResult
		open func securityAdvisory(aliasSuffix: String? = nil, _ subfields: (SecurityAdvisoryQuery) -> Void) -> RepositoryVulnerabilityAlertQuery {
			let subquery = SecurityAdvisoryQuery()
			subfields(subquery)

			addField(field: "securityAdvisory", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@discardableResult
		open func securityVulnerability(aliasSuffix: String? = nil, _ subfields: (SecurityVulnerabilityQuery) -> Void) -> RepositoryVulnerabilityAlertQuery {
			let subquery = SecurityVulnerabilityQuery()
			subfields(subquery)

			addField(field: "securityVulnerability", aliasSuffix: aliasSuffix, subfields: subquery)
			return self
		}

		@discardableResult
		open func vulnerableManifestFilename(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "vulnerableManifestFilename", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func vulnerableManifestPath(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "vulnerableManifestPath", aliasSuffix: aliasSuffix)
			return self
		}

		@discardableResult
		open func vulnerableRequirements(aliasSuffix: String? = nil) -> RepositoryVulnerabilityAlertQuery {
			addField(field: "vulnerableRequirements", aliasSuffix: aliasSuffix)
			return self
		}
	}

	open class RepositoryVulnerabilityAlert: GraphQL.AbstractResponse, GraphQLObject, Node, RepositoryNode {
		public typealias Query = RepositoryVulnerabilityAlertQuery

		open override func deserializeValue(fieldName: String, value: Any) throws -> Any? {
			let fieldValue = value
			switch fieldName {
				case "affectedRange":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "createdAt":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "dismissReason":
				if value is NSNull { return nil }
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "dismissedAt":
				if value is NSNull { return nil }
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "dismisser":
				if value is NSNull { return nil }
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return try User(fields: value)

				case "externalIdentifier":
				if value is NSNull { return nil }
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "externalReference":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "fixedIn":
				if value is NSNull { return nil }
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "id":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return GraphQL.ID(rawValue: value)

				case "packageName":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "repository":
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return try Repository(fields: value)

				case "securityAdvisory":
				if value is NSNull { return nil }
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return try SecurityAdvisory(fields: value)

				case "securityVulnerability":
				if value is NSNull { return nil }
				guard let value = value as? [String: Any] else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return try SecurityVulnerability(fields: value)

				case "vulnerableManifestFilename":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "vulnerableManifestPath":
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				case "vulnerableRequirements":
				if value is NSNull { return nil }
				guard let value = value as? String else {
					throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
				}
				return value

				default:
				throw SchemaViolationError(type: RepositoryVulnerabilityAlert.self, field: fieldName, value: fieldValue)
			}
		}

		open var typeName: String { return "RepositoryVulnerabilityAlert" }

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.vulnerableVersionRange` instead. Removal on 2019-10-01 UTC.")
		open var affectedRange: String {
			return internalGetAffectedRange()
		}

		func internalGetAffectedRange(aliasSuffix: String? = nil) -> String {
			return field(field: "affectedRange", aliasSuffix: aliasSuffix) as! String
		}

		open var createdAt: String {
			return internalGetCreatedAt()
		}

		func internalGetCreatedAt(aliasSuffix: String? = nil) -> String {
			return field(field: "createdAt", aliasSuffix: aliasSuffix) as! String
		}

		open var dismissReason: String? {
			return internalGetDismissReason()
		}

		func internalGetDismissReason(aliasSuffix: String? = nil) -> String? {
			return field(field: "dismissReason", aliasSuffix: aliasSuffix) as! String?
		}

		open var dismissedAt: String? {
			return internalGetDismissedAt()
		}

		func internalGetDismissedAt(aliasSuffix: String? = nil) -> String? {
			return field(field: "dismissedAt", aliasSuffix: aliasSuffix) as! String?
		}

		open var dismisser: ExampleSchema.User? {
			return internalGetDismisser()
		}

		func internalGetDismisser(aliasSuffix: String? = nil) -> ExampleSchema.User? {
			return field(field: "dismisser", aliasSuffix: aliasSuffix) as! ExampleSchema.User?
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityAdvisory.identifiers` instead. Removal on 2019-10-01 UTC.")
		open var externalIdentifier: String? {
			return internalGetExternalIdentifier()
		}

		func internalGetExternalIdentifier(aliasSuffix: String? = nil) -> String? {
			return field(field: "externalIdentifier", aliasSuffix: aliasSuffix) as! String?
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityAdvisory.references` instead. Removal on 2019-10-01 UTC.")
		open var externalReference: String {
			return internalGetExternalReference()
		}

		func internalGetExternalReference(aliasSuffix: String? = nil) -> String {
			return field(field: "externalReference", aliasSuffix: aliasSuffix) as! String
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.firstPatchedVersion` instead. Removal on 2019-10-01 UTC.")
		open var fixedIn: String? {
			return internalGetFixedIn()
		}

		func internalGetFixedIn(aliasSuffix: String? = nil) -> String? {
			return field(field: "fixedIn", aliasSuffix: aliasSuffix) as! String?
		}

		open var id: GraphQL.ID {
			return internalGetId()
		}

		func internalGetId(aliasSuffix: String? = nil) -> GraphQL.ID {
			return field(field: "id", aliasSuffix: aliasSuffix) as! GraphQL.ID
		}

		@available(*, deprecated, message:"advisory specific fields are being removed from repositoryVulnerabilityAlert objects Use `securityVulnerability.package` instead. Removal on 2019-10-01 UTC.")
		open var packageName: String {
			return internalGetPackageName()
		}

		func internalGetPackageName(aliasSuffix: String? = nil) -> String {
			return field(field: "packageName", aliasSuffix: aliasSuffix) as! String
		}

		open var repository: ExampleSchema.Repository {
			return internalGetRepository()
		}

		func internalGetRepository(aliasSuffix: String? = nil) -> ExampleSchema.Repository {
			return field(field: "repository", aliasSuffix: aliasSuffix) as! ExampleSchema.Repository
		}

		open var securityAdvisory: ExampleSchema.SecurityAdvisory? {
			return internalGetSecurityAdvisory()
		}

		func internalGetSecurityAdvisory(aliasSuffix: String? = nil) -> ExampleSchema.SecurityAdvisory? {
			return field(field: "securityAdvisory", aliasSuffix: aliasSuffix) as! ExampleSchema.SecurityAdvisory?
		}

		open var securityVulnerability: ExampleSchema.SecurityVulnerability? {
			return internalGetSecurityVulnerability()
		}

		func internalGetSecurityVulnerability(aliasSuffix: String? = nil) -> ExampleSchema.SecurityVulnerability? {
			return field(field: "securityVulnerability", aliasSuffix: aliasSuffix) as! ExampleSchema.SecurityVulnerability?
		}

		open var vulnerableManifestFilename: String {
			return internalGetVulnerableManifestFilename()
		}

		func internalGetVulnerableManifestFilename(aliasSuffix: String? = nil) -> String {
			return field(field: "vulnerableManifestFilename", aliasSuffix: aliasSuffix) as! String
		}

		open var vulnerableManifestPath: String {
			return internalGetVulnerableManifestPath()
		}

		func internalGetVulnerableManifestPath(aliasSuffix: String? = nil) -> String {
			return field(field: "vulnerableManifestPath", aliasSuffix: aliasSuffix) as! String
		}

		open var vulnerableRequirements: String? {
			return internalGetVulnerableRequirements()
		}

		func internalGetVulnerableRequirements(aliasSuffix: String? = nil) -> String? {
			return field(field: "vulnerableRequirements", aliasSuffix: aliasSuffix) as! String?
		}

		override open func childObjectType(key: String) -> GraphQL.ChildObjectType {
			switch(key) {
				case "affectedRange":

				return .scalar

				case "createdAt":

				return .scalar

				case "dismissReason":

				return .scalar

				case "dismissedAt":

				return .scalar

				case "dismisser":

				return .object

				case "externalIdentifier":

				return .scalar

				case "externalReference":

				return .scalar

				case "fixedIn":

				return .scalar

				case "id":

				return .scalar

				case "packageName":

				return .scalar

				case "repository":

				return .object

				case "securityAdvisory":

				return .object

				case "securityVulnerability":

				return .object

				case "vulnerableManifestFilename":

				return .scalar

				case "vulnerableManifestPath":

				return .scalar

				case "vulnerableRequirements":

				return .scalar

				default:
				return .scalar
			}
		}

		override open func fetchChildObject(key: String) -> GraphQL.AbstractResponse? {
			switch(key) {
				case "dismisser":
				return internalGetDismisser()

				case "repository":
				return internalGetRepository()

				case "securityAdvisory":
				return internalGetSecurityAdvisory()

				case "securityVulnerability":
				return internalGetSecurityVulnerability()

				default:
				break
			}
			return nil
		}

		override open func fetchChildObjectList(key: String) -> [GraphQL.AbstractResponse] {
			switch(key) {
				default:
				return []
			}
		}

		open func childResponseObjectMap() -> [GraphQL.AbstractResponse]  {
			var response: [GraphQL.AbstractResponse] = []
			objectMap.keys.forEach({
				key in
				switch(key) {
					case "dismisser":
					if let value = internalGetDismisser() {
						response.append(value)
						response.append(contentsOf: value.childResponseObjectMap())
					}

					case "repository":
					response.append(internalGetRepository())
					response.append(contentsOf: internalGetRepository().childResponseObjectMap())

					case "securityAdvisory":
					if let value = internalGetSecurityAdvisory() {
						response.append(value)
						response.append(contentsOf: value.childResponseObjectMap())
					}

					case "securityVulnerability":
					if let value = internalGetSecurityVulnerability() {
						response.append(value)
						response.append(contentsOf: value.childResponseObjectMap())
					}

					default:
					break
				}
			})
			return response
		}

		open func responseObject() -> GraphQL.AbstractResponse {
			return self as GraphQL.AbstractResponse
		}
	}
}
